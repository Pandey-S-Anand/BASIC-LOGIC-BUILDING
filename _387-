//Bruteforce Approach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        List<Integer> nodeValues = new ArrayList<>();
        ListNode currentNode = head;

        while (currentNode != null) {
            nodeValues.add(currentNode.val);
            currentNode = currentNode.next;
        }

        SinglyLinkedList singlyLinkedList = new SinglyLinkedList();

        for (int i = nodeValues.size() - 1; i >= 0; i--) {
            singlyLinkedList.append(nodeValues.get(i));
        }

        return singlyLinkedList.getHead();
    }
}

class SinglyLinkedList {
    private ListNode head;
    private ListNode tail;

    public ListNode getHead() {
        return head;
    }

    public void append(int data) {
        ListNode newNode = new ListNode(data);

        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }
}


//Optimal Approach

//Iterative Approach

