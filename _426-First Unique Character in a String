//Without Recursion

// Bruteforce Approach

class Solution {
    public int firstUniqChar(String str) {
        for (int i = 0; i < str.length(); i++) {
            if (str.indexOf(str.charAt(i)) == str.lastIndexOf(str.charAt(i))) {
                return i;
            }
        }

        return -1;
    }
}

//Aliter

class Solution {
    public int firstUniqChar(String str) {
        for (int i = 0; i < str.length(); i++) {
            int j;
            for (j = 0; j < str.length(); j++) {
                if (i != j && str.charAt(i) == str.charAt(j)) {
                    break;
                }
            }

            if (j == str.length()) {
                return i;
            }
        }

        return -1;
    }
}


//Better Approach

class Solution {
    public int firstUniqChar(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            frequencyMap.put(str.charAt(i), frequencyMap.getOrDefault(str.charAt(i), 0) + 1);
        }

        for (int i = 0; i < str.length(); i++) {
            if (frequencyMap.get(str.charAt(i)) == 1) {
                return i;
            }
        }

        return -1;
    }
}


//Optimal Approach

class Solution {
    public int firstUniqChar(String str) {
        int[] frequencyArray = new int[26];

        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        for (int i = 0; i < str.length(); i++) {
            if (frequencyArray[str.charAt(i) - 'a'] == 1) {
                return i;
            }
        }

        return -1;
    }
}
