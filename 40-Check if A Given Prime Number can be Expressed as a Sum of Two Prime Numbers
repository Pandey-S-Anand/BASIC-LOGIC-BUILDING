/*
Efficient solution: 
Apart from 2, all of the prime numbers are odd. So it is not possible to represent a prime number (which is odd) to be written as a sum of two odd prime numbers,
so we are sure that one of the two prime numbers should be 2. So we have to check whether n-2 is prime or not. If it holds we print Yes else No.
For example, if the number is 19 then we have to check whether 19-2 = 17 is a prime number or not. If 17 is a prime number then print yes otherwise print no.
*/

class Solution {
    public static boolean canBeExpressedAsSumOfTwoPrimes(int num) {
        // Check if (num - 2) is prime
        if (isPrime(num - 2)) {
            return true;
        }
        return false;
    }

    private static boolean isPrime(int number) {
        if (number <= 1) {
            return false; // Numbers <= 1 are not prime
        }

        if (number == 2) {
            return true; // 2 is the only even prime number
        }

        for (int divisor = 2; divisor <= Math.sqrt(number); divisor++) {
            if (number % divisor == 0) {
                return false; // Found a divisor, so not prime
            }
        }

        return true; // Prime if no divisors are found
    }
}
