/*
   Let's take the example of converting the decimal number 25 to binary:

Start with the decimal number (25).

Divide the decimal number by 2:
Quotient: 25 / 2 = 12
Remainder: 1

Continue dividing the quotient by 2:
Quotient: 12 / 2 = 6
Remainder: 0

Continue dividing the quotient by 2:
Quotient: 6 / 2 = 3
Remainder: 0

Continue dividing the quotient by 2:
Quotient: 3 / 2 = 1
Remainder: 1

Once more:
Quotient: 1 / 2 = 0
Remainder: 1

Reading the remainders from bottom to top, we get the binary representation: 11001.
*/

//Method 1: Naive Approach (Will only work for Positive Integers ,fail for Negative Integers and 0)

class Solution {
    public String decimalToBinary(int decimalNumber) {
        String binary = "";
        while (decimalNumber != 0) {
            binary = binary + (decimalNumber % 2);
            decimalNumber = decimalNumber / 2;
        }
        return reverseString(binary);
    }

    private String reverseString(String str) {
        String reversedString = "";
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString = reversedString + str.charAt(i);
        }
        return reversedString;
    }
}




//Method 2: Optimal Approach (Will work for Positive Integers ,Negative Integers and 0)

class Solution { 
    public String decimalToBinary(int decimalNumber) {
        if (decimalNumber == 0) {
            return "0";
        }

        String binaryString = "";
        boolean leadingOneFound = false;

        for (int i = 31; i >= 0; i--) {
            int bitMask = 1 << i;

            if (leadingOneFound) {
                if ((decimalNumber & bitMask) == 0) {
                    binaryString += "0"; 
                } else {
                    binaryString += "1";
                }
            } else {
                if ((decimalNumber & bitMask) != 0) {
                    binaryString += "1"; 
                    leadingOneFound = true;
                }
            }
        }

        return binaryString;
    }
}


//Method 3 : inbuilt Method (Will work for Positive Integers ,Negative Integers and 0)

class Solution { 
  public static String decimalToBinary(int decimalNumber) {
    String binaryValue = Integer.toBinaryString(decimalNumber);
    return binaryValue;
  }
}
