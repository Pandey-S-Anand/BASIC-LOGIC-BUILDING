//Without Recursion

// Bruteforce Approach

class Solution {
    public int firstUniqChar(String str) {
       int n=str.length();
       
       for(int i=0;i<n;i++)
         if(str.indexOf(str.charAt(i))==str.lastIndexOf(str.charAt(i)))
           return i;
       
      return -1;
    }
}


//Better Approach

class Solution {
    public int firstUniqChar(String str) {
       char[]arr=str.toCharArray();
       Map<Character,Integer>charFrequencyMap=new HashMap<>();

       for(char ch:arr){
         charFrequencyMap.put(ch,charFrequencyMap.getOrDefault(ch,0)+1);
       }

       for(int i=0;i<arr.length;i++){
         if(charFrequencyMap.get(arr[i])==1){
            return i;
         }
       }

       return -1;
    }
}


//Optimal Approach

class Solution {
    public int firstUniqChar(String str) {
       char[]arr=str.toCharArray();
       int[]freqArr=new int[26];

       for(char ch:arr){
         freqArr[ch-'a']++;
       }

       for(int i=0;i<arr.length;i++){
         if(freqArr[arr[i]-'a']==1){
            return i;
         }
       }

       return -1;
    }
}


//Recursive Approach

class Solution {
    public int firstUniqChar(String str) {
       int[]freqArr=new int[26];

       for(char ch:str.toCharArray()){
         freqArr[ch-'a']++;
       }

       return firstUniqChar(str,0,freqArr);
    }

    public int firstUniqChar(String str,int index,int[] freqArr) {
       if(index==str.length()){
          return -1;
       }
       
       if(freqArr[str.charAt(index)-'a']==1){
          return index;
       }
       
       return firstUniqChar(str,index+1,freqArr);
    }
}
