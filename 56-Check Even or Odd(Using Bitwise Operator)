//Method 1 (Using BITWISE AND)
/*
The idea is to check whether the last bit of the number is set or not. If last bit is set then the number is odd, otherwise even.
As we know bitwise AND Operation of the Number by 1 will be 1, If it is odd because the last bit will be already set. Otherwise it will give 0 as output. 
*/

class Solution{
  public static boolean isEven(int num){
    if((num&1)==0)
      return true; // EVEN
    else 
      return false;  // ODD
  }
}


//Method 2 (Using BITWISE XOR)
/* 
As we know bitwise XOR Operation of the Number by 1 increment the value of the number by 1 if the number is even
otherwise it decrements the value of the number by 1 if the value is odd.
*/

class Solution{
  public static boolean isEven(int num){
    if((num^1)==(num+1))
      return true;  // EVEN
    else //if((num^1)==(num-1))
      return false; // ODD
  }
}


//Method 3 (Using BITWISE OR)
/*
As we know bitwise OR Operation of the Number by 1 increment the value of the number by 1 if the number is even
otherwise the value of the number remains the same/Unchanged, if the value is odd.
*/

public class Solution{
  public static boolean isEven(int num){
    if((num|1)==(num+1))
      return true;
    else //if((num|1)==num)
      return false; //Number is ODD
  }
}
