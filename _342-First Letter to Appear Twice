//Naive Approach 

class Solution {
    public char repeatedCharacter(String str) {
        Set<Character> visited = new HashSet<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (visited.contains(ch)) {
                return ch;
            }
            visited.add(ch);
        }

        return '\0'; // This return statement will never be reached
    }
}



//Optimal Approach

class Solution {
    public char repeatedCharacter(String str) {
        boolean[] visited = new boolean[26];

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (visited[ch - 'a']) {
                return ch;
            }
            visited[ch - 'a'] = true;
        }

        return '\0';
    }
}
