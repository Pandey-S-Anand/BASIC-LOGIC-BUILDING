//Bruteforce Approach

class Solution {
    public static int maxDiff(int[] arr, int n) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, Math.abs(arr[i] - arr[j]));
            }
        }

        return max;
    }
}


//Better Approach

class Solution {
    public static int maxDiff(int[] arr, int n) {
        return maximum(arr, n) - minimum(arr, n);
    }

    public static int maximum(int[] arr, int n) {
        int max = arr[0];
        for (int i = 1; i < n; i++){
            max=Math.max(max,arr[i])
        }
        return max;
    }

    public static int minimum(int[] arr, int n) {
        int min = arr[0];
        for (int i = 1; i < n; i++){
            min=Math.min(min,arr[i])
        }

        return min;
    }
}


//Optimal Approach

class Solution {
    public static int maxDiff(int[] arr, int n) {
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;

        for (int val : arr) {
            min = Math.min(min, val);
            max = Math.max(max, val);
        }

        return (max - min);
    }
}

