//Iterative Approach

//Method 1 (The idea is that for given two numbers a and b, we can get a×b by adding an integer a exactly b times to the result.) 

class Solution {
    public static long calculateProduct(int num1, int num2) {
        if (num1 == 0 || num2 == 0) {
            return 0;
        } else if (num1 == 1) {
            return num2;
        } else if (num2 == 1) {
            return num1;
        }

        if ((num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)) { // Opposite signs, product is negative
            return -1 * multiplyUsingAddition(Math.abs(num1), Math.abs(num2));
        } else { // Same sign (both positive or both negative), product is positive
            return multiplyUsingAddition(Math.abs(num1), Math.abs(num2));
        }
    }

    private static long multiplyUsingAddition(int num1, int num2) {
        long product = 0;
        for (int i = 1; i <= num2; i++) {
            product += num1;
        }
        return product;
    }
}

  
//Method 2 (The idea is that for given two numbers a and b, we can get a×b by adding an integer b exactly a times to the result.) 

class Solution {
    public static long calculateProduct(int num1, int num2) {
        if (num1 == 0 || num2 == 0) {
            return 0;
        } else if (num1 == 1) {
            return num2;
        } else if (num2 == 1) {
            return num1;
        }

        if ((num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)) { // Opposite signs, product is negative
            return -1 * multiplyUsingAddition(Math.abs(num1), Math.abs(num2));
        } else { // Same sign (both positive or both negative), product is positive
            return multiplyUsingAddition(Math.abs(num1), Math.abs(num2));
        }
    }

    private static long multiplyUsingAddition(int num1, int num2) {
        long product = 0;
        for (int i = 1; i <= num1; i++) {
            product += num2;
        }
        return product;
    }
}


//Method 3

class Solution {
    public static long calculateProduct(int num1, int num2) {
        if (num1 == 0 || num2 == 0) {
            return 0;
        } else if (num1 == 1) {
            return num2;
        } else if (num2 == 1) {
            return num1;
        }

        if ((num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)) { // Opposite signs, product is negative
            return -1 * multiplyUsingRussianPeasant(Math.abs(num1), Math.abs(num2));
        } else { // Same sign (both positive or both negative), product is positive
            return multiplyUsingRussianPeasant(Math.abs(num1), Math.abs(num2));
        }
    }

    private static long multiplyUsingRussianPeasant(int num1, int num2) {
        long product = 0;
        while (num2 != 0) {
            if (num2 % 2 != 0) { // If num2 is odd, add num1 to the product
                product += num1;
            }
            num1 <<= 1; // Double num1
            num2 >>= 1; // Halve num2
        }
        return product;
    }
}


/*
How does this work? 
The value of a*b is same as (a*2)*(b/2) if b is even, otherwise the value is same as ((a*2)*(b/2) + a). 
In the while loop, we keep multiplying ‘a’ with 2 and keep dividing ‘b’ by 2.
If ‘b’ becomes odd in loop, we add ‘a’ to ‘res’. When value of ‘b’ becomes 1, the value of ‘res’ + ‘a’, gives us the result. 
Note that when ‘b’ is a power of 2, the ‘res’ would remain 0 and ‘a’ would have the multiplication.
*/

//Recurssive Approach

//Method 1 (The idea is that for given two numbers a and b, we can get a×b by adding an integer a exactly b times to the result.) 

class Solution {
    public static int calculateProduct(int num1, int num2) {
        if (num1 == 0 || num2 == 0) {
            return 0;
        } else if (num1 == 1) {
            return num2;
        } else if (num2 == 1) {
            return num1;
        }

        if ((num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)) { // Opposite signs, product is negative
            return -1 * multiplyUsingRecursion1(Math.abs(num1), Math.abs(num2));
        } else { // Same sign (both positive or both negative), product is positive
            return multiplyUsingRecursion1(Math.abs(num1), Math.abs(num2));
        }
    }

    private static int multiplyUsingRecursion1(int num1, int num2) {
        if (num2 == 0) {
            return 0;
        }
        return num1 + multiplyUsingRecursion1(num1, num2 - 1);
    }
}


//Method 2 (The idea is that for given two numbers a and b, we can get a×b by adding an integer b exactly a times to the result.) 

class Solution {
    public static int calculateProduct(int num1, int num2) {
        if (num1 == 0 || num2 == 0) {
            return 0;
        } else if (num1 == 1) {
            return num2;
        } else if (num2 == 1) {
            return num1;
        }

        if ((num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)) { // Opposite signs, product is negative
            return -1 * multiplyUsingRecursion2(Math.abs(num1), Math.abs(num2));
        } else { // Same sign (both positive or both negative), product is positive
            return multiplyUsingRecursion2(Math.abs(num1), Math.abs(num2));
        }
    }

    private static int multiplyUsingRecursion2(int num1, int num2) {
        if (num1 == 0) {
            return 0;
        }
        return num2 + multiplyUsingRecursion2(num1 - 1, num2);
    }
}
