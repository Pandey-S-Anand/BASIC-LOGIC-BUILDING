//Without Recursion

//Method 1:Using Extra Space

class Solution {
    public void reverse(int[] arr) {
        int[] temp = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            temp[i] = arr[arr.length - 1 - i];
        }

        System.arraycopy(temp, 0, arr, 0, n);
    }
}


//Method 2: Without using Extra Space

class Solution {
    public void reverse(int[] arr) {
        for (int i = 0; i < (arr.length / 2); i++) {
            int temp = arr[i];
            arr[i] = arr[arr.length - 1 - i];
            arr[arr.length - 1 - i] = temp;
        }
    }
}



//Using Recursion 

//Method 1 : Reverse the entire array

class Solution {
    public void reverse(int[] arr, int index) { // Intial value of index is 0
        if (index == (arr.length / 2)) {
            return;
        }
        swap(arr, index, arr.length - 1 - index);
        reverse(arr, index + 1);
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Aliter 

//Method 2 : Reverse the array within the desired range of indices

class Solution {
    public void reverse(int[] arr, int startIndex, int endIndex) {
        if (startIndex >= endIndex) {
            return;
        }

        swap(arr, startIndex, endIndex);

        reverse(arr, startIndex + 1, endIndex - 1);
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
