//(via Repeated Substraction)

class Solution {
    public int divide(int numerator, int denominator) {
        long dividend = numerator, divisor = denominator;

        if (divisor == 1) {
            return (int) dividend;
        } else if (divisor == -1 && dividend > 0) {
            return (int) -dividend;
        } else if (divisor == -1 && dividend < 0) {
            if (dividend == Integer.MIN_VALUE) { // Integer.MIN_VALUE= -2^31 = -2147483648 and Integer.MAX_VALUE = 2^31-1 = 2147483647
                return Integer.MAX_VALUE;
            }

            return (int) Math.abs(dividend);
        }

        int signOfQuotient = 1;

        if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
            signOfQuotient = -1; // Quotient will be negative
        }

        divisor = Math.abs(divisor);
        dividend = Math.abs(dividend);

        int quotient = 0;
        while (dividend >= divisor) {
            dividend = dividend - divisor;
            quotient++;
        }

        return signOfQuotient * quotient;
    }
}
