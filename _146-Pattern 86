/*Q-To Print:
For the given N, the number of rows or columns to be printed will be 2*N â€“ 1.

4444444
4333334
4322234
4321234
4322234
4333334
4444444

*/  
  
//Figure Specific Code

class Solution{
  public static void pattern86(int N){  
      int min=0;
      for(int i=1;i<=N;i++)
      {
          for(int j=1;j<=N;j++)
          {
              if(i<j)
                min=i;
              else
                min=j;

             int temp=N-min+1;
             System.out.print(temp);
          }
          
          for(int j=N-1;j>=1;j--)
          {
              if(i<j)
                min=i;
              else
                min=j;

             int temp=N-min+1;
             System.out.print(temp);
          }
          
         System.out.println(); 
      }
      
      
      for(int i=N-1;i>=1;i--)
      {
          for(int j=1;j<=N;j++)
          {
              if(i<j)
                min=i;
              else
                min=j;

             int temp=N-min+1;
             System.out.print(temp);
          }
          
          for(int j=N-1;j>=1;j--)
          {
              if(i<j)
                min=i;
              else
                min=j;
                
             int temp=N-min+1;
             System.out.print(temp);
          }
          
         System.out.println(); 
      }  
  }
}


//Aliter


class Solution{
   	public static void pattern86(int N) {
        int size = 2 * N - 1; // Calculate the size of the grid
        int[][] grid = new int[size][size]; // Create a grid to store the numbers

        for (int i = 0; i < N; i++) {
            // Top and left part
            for (int j = i; j < size - i; j++) {
                grid[i][j] = N - i;
                grid[j][i] = N - i;
            }
            // Bottom and right part
            for (int j = size - i - 1; j >= i; j--) {
                grid[size - i - 1][j] = N - i;
                grid[j][size - i - 1] = N - i;
            }
        }
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(grid[i][j]);
            }
            System.out.println();
        }
    }
}
