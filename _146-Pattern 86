/*Q-To Print:
For the given N, the number of rows or columns to be printed will be 2*N â€“ 1.

4444444
4333334
4322234
4321234
4322234
4333334
4444444

*/  
  
//Generalised Code

class Solution{
  public static void pattern86(int N){  
      int size = 2 * N - 1; // Calculate the size of the grid
      for (int i = 0; i < size; i++) {
         for (int j = 0; j < size; j++) {
             int min = i < j ? i : j;
             min = min < size - i ? min : size - i - 1;
             min = min < size - j ? min : size - j - 1;
             System.out.print(N - min);
         }
        System.out.println();
      }
  }
}


//Aliter


class Solution{
   	public static void pattern86(int N) {
        int size = 2 * N - 1;
        int[][] grid = new int[size][size]; 

        for (int i = 0; i < N; i++) {
            // Top and left part
            for (int j = i; j < size - i; j++) {
                grid[i][j] = N - i;
                grid[j][i] = N - i;
            }
            // Bottom and right part
            for (int j = size - i - 1; j >= i; j--) {
                grid[size - i - 1][j] = N - i;
                grid[j][size - i - 1] = N - i;
            }
        }
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(grid[i][j]);
            }
          System.out.println();
        }
    }
}
