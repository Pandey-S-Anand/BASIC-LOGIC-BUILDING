//Without Recursion

//Method 1

class Solution {
    public static long findSum(String str) {
        long sum = 0, num = 0;

        for (int i = 0; i < str.length(); i++) {
            if (Character.isDigit(str.charAt(i))) {
                num = num * 10 + (str.charAt(i) - '0');
            } else if (num != 0) {
                sum += num;
                num = 0;
            }
        }

        sum += num;

        return sum;
    }
}


//Method 2

class Solution {
    public static long findSum(String str) {
        long totalSum = 0;
        StringBuilder currentNumber = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            if (Character.isDigit(str.charAt(i))) {
                currentNumber.append(str.charAt(i));
            } else if (currentNumber.length() > 0) {
                totalSum += Long.parseLong(currentNumber.toString());
                currentNumber.setLength(0);
            }
        }

        if (currentNumber.length() > 0) {
            totalSum += Long.parseLong(currentNumber.toString());
        }

        return totalSum;
    }
}



//Using Recursion

//Method 1

class Solution {
    public static long findSum(String str) {
        return findSumHelper(str, 0, 0);
    }

    private static long findSumHelper(String str, int index, long currentNumber) {
        if (index == str.length()) {
            return currentNumber; // Return the last number if it exists
        }

        char currentChar = str.charAt(index);

        if (Character.isDigit(currentChar)) {
            // Accumulate the current number
            return findSumHelper(str, index + 1, currentNumber * 10 + (currentChar - '0'));
        }

        // Add the accumulated number to the result and reset the current number
        if (currentNumber != 0) {
            return currentNumber + findSumHelper(str, index + 1, 0);
        }

        return findSumHelper(str, index + 1, currentNumber);
    }
}


//Method 2

class Solution {
    public static long findSum(String str) {
        return findSumHelper(str, 0, new StringBuilder());
    }

    private static long findSumHelper(String str, int index, StringBuilder currentNumber) {
        if (index == str.length()) {
            // Return the last number if present
            if (currentNumber.length() > 0) {
                return Long.parseLong(currentNumber.toString());
            }
            return 0;
        }

        char currentChar = str.charAt(index);

        if (Character.isDigit(currentChar)) {
            // Append the digit to the current number
            currentNumber.append(currentChar);
            return findSumHelper(str, index + 1, currentNumber);
        }

        if (currentNumber.length() != 0) {
            // Convert accumulated number, reset, and add it to the result
            long num = Long.parseLong(currentNumber.toString());
            currentNumber.setLength(0);
            return num + findSumHelper(str, index + 1, currentNumber);
        }

        return findSumHelper(str, index + 1, currentNumber);
    }
}
