//Iterative Approach

//Method 1 (The idea is that for given two numbers a and b, we can get a×b by adding an integer a exactly b times to the result.) 

class Solution{
    public static long driver(int num1,int num2){
       if(num1==0 || num2==0)
         return 0;
       else if(num1==1)
         return num2;
       else if(num2==1)
         return num1;
         
       if((num1<0 && num2>0) || (num1>0 && num2<0))  // if opposite sign then product will be negative
          return -1*multiply(Math.abs(num1),Math.abs(num2));
       else   //if same sign(i.e Both +ve or Both -ve )  then product will Positive   
          return multiply(Math.abs(num1),Math.abs(num2));
    }

    public static long multiply(int num1,int num2)
    {
       long prod=0;
       for(int i=1;i<=num2;i++)
         prod+=num1;
         
       return prod;
    }
}
  
  
//Method 2 (The idea is that for given two numbers a and b, we can get a×b by adding an integer b exactly a times to the result.) 

class Solution{
    public static long driver(int num1,int num2){
       if(num1==0 || num2==0)
         return 0;
       else if(num1==1)
         return num2;
       else if(num2==1)
         return num1;
         
       if((num1<0 && num2>0) || (num1>0 && num2<0))  // if opposite sign then product will be negative
          return -1*multiply(Math.abs(num1),Math.abs(num2));
       else //if same sign(i.e Both +ve or Both -ve )  then product will Positive   
          return multiply(Math.abs(num1),Math.abs(num2));
    }

    public static long multiply(int num1,int num2)
    {
       long prod=0;
       for(int i=1;i<=num1;i++)
         prod+=num2;
         
       return prod;
    }
}


//Method 3

class Solution{   
    public static long driver(int num1,int num2){
       if(num1==0 || num2==0)
         return 0;
       else if(num1==1)
         return num2;
       else if(num2==1)
         return num1;
         
       if((num1<0 && num2>0) || (num1>0 && num2<0))  // if opposite sign then product will be negative
          return -1*multiply(Math.abs(num1),Math.abs(num2));
       else //if same sign(i.e Both +ve or Both -ve )  then product will Positive   
          return multiply(Math.abs(num1),Math.abs(num2));
    }

    public static long multiply(int num1,int num2) //Russian Peasant Algorithm
    {
        long prod = 0; 
        // While second number doesn't become 0
        while (num2!=0)
        {
             // If second number becomes odd,add the first number to result
            if ((num2%2)!= 0)   //if ((num2 & 1) != 0) (If the last bit of a number is set then the number is odd, otherwise even.) 
               prod+=num1;
  
           //Double the first number
          // and halve the second number
           num1 = num1 << 1;// x<<y = x*(2^y)
           num2 = num2 >> 1;// x>>y = x*/(2^y)
        }
       return prod; 	
    }
}

/*
How does this work? 
The value of a*b is same as (a*2)*(b/2) if b is even, otherwise the value is same as ((a*2)*(b/2) + a). 
In the while loop, we keep multiplying ‘a’ with 2 and keep dividing ‘b’ by 2.
If ‘b’ becomes odd in loop, we add ‘a’ to ‘res’. When value of ‘b’ becomes 1, the value of ‘res’ + ‘a’, gives us the result. 
Note that when ‘b’ is a power of 2, the ‘res’ would remain 0 and ‘a’ would have the multiplication.
*/


//Recurssive Approach

//Method 1 (The idea is that for given two numbers a and b, we can get a×b by adding an integer a exactly b times to the result.) 

public class Solution{
    public static int driver(int num1,int num2){
       if(num1==0 || num2==0)
         return 0;
       else if(num1==1)
         return num2;
       else if(num2==1)
         return num1;
         
       if((num1<0 && num2>0) || (num1>0 && num2<0))  // if opposite sign then product will be negative
          return -1*multiply(Math.abs(num1),Math.abs(num2));
       else //if same sign(i.e Both +ve or Both -ve )  then product will Positive   
          return multiply(Math.abs(num1),Math.abs(num2));
    }

    public static int multiply(int num1,int num2)
    {
        if(num2==0)
           return 0;
        
       return num1+multiply(num1,num2-1);
    }
}


//Method 2 (The idea is that for given two numbers a and b, we can get a×b by adding an integer b exactly a times to the result.) 

class Solution{
    public static int driver(int num1,int num2){
       if(num1==0 || num2==0)
         return 0;
       else if(num1==1)
         return num2;
       else if(num2==1)
         return num1;
         
       if((num1<0 && num2>0) || (num1>0 && num2<0))  // if opposite sign then product will be negative
          return -1*multiply(Math.abs(num1),Math.abs(num2));
       else //if same sign(i.e Both +ve or Both -ve )  then product will Positive   
          return multiply(Math.abs(num1),Math.abs(num2));
    }

    public static int multiply(int num1,int num2)
    {
        if(num1==0)
           return 0;
        
        return num2+multiply(num1-1,num2);
    }
}
