//Without Recursion

class Solution {
    public String wordAppend(String[] arr) {
        Map<String, Integer> frequencyMap = new HashMap<>();
        StringBuilder modifiedString = new StringBuilder();

        for (String str : arr) {
            frequencyMap.put(str, frequencyMap.getOrDefault(str, 0) + 1);
            if (frequencyMap.get(str) % 2 == 0) {
                modifiedString.append(str);
            }
        }
        return modifiedString.toString();
    }
}



//Using Recursion

class Solution {
    private Map<String, Integer> frequencyMap;

    public String wordAppend(String[] arr) {
        frequencyMap = new HashMap<>();
        return wordAppendRecursive(arr, 0);
    }

    private String wordAppendRecursive(String[] arr, int index) {
        if (index == arr.length) {
            return ""; // Base case: reached the end of the array
        }

        // Update the frequency map for the current word
        frequencyMap.put(arr[index], frequencyMap.getOrDefault(arr[index], 0) + 1);

        // If the word's frequency is even, append it to the result
        if (frequencyMap.get(arr[index]) % 2 == 0) {
            return arr[index] + wordAppendRecursive(arr, index + 1);
        }

        // Otherwise, proceed to the next word
        return wordAppendRecursive(arr, index + 1);
    }
}
