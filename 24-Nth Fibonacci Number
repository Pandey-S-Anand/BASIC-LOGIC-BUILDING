/*
The Fibonacci numbers are the numbers in the following integer sequence.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..

In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation 

Fn = Fn-1 + Fn-2
*/

//Iterative Approach

class Solution {
    private final static int MOD = 1000000007;

    static int nthFibonacci(int n) {
        int a = -1, b = 1, c = 0;

        for (int i = 0; i <= n; i++) {
            c = a % MOD + b % MOD;
            a = b;
            b = c;
        }

        return c;
    }
}


//Recursive Approach

class Solution {
    private final static int MOD = 1000000007;

    static int nthFibonacci(int n) {
        if (n <= 1) {
            return n;
        }

        return (nthFibonacci(n - 1) % MOD + nthFibonacci(n - 2) % MOD);
    }
}


//Memoized Approach

class Solution {
    private static int[] cache;
    private final static int MOD = 1000000007;

    static int nthFibonacci(int n) {
        cache = new int[n + 1];
        Arrays.fill(cache, -1);
        return computeNthFibonacci(n);
    }

    private static int computeNthFibonacci(int n) {
        if (n <= 1) {
            return n;
        }

        if (cache[n] != -1) {
            return cache[n];
        }

        return cache[n] = (computeNthFibonacci(n - 1) % MOD + computeNthFibonacci(n - 2) % MOD);
    }
}


//Dynamic Programming

class Solution {
    private final static int MOD = 1000000007;

    static int nthFibonacci(int n) {
        if (n == 0) {
            return 0;
        }
        
        int[] fibonacci = new int[n + 1];
        fibonacci[0] = 0;
        fibonacci[1] = 1;

        for (int i = 2; i <= n; i++) {
            fibonacci[i] = (fibonacci[i - 1] % MOD + fibonacci[i - 2] % MOD) % MOD;
        }

        return fibonacci[n];
    }
}
