/*
Factorial of a non-negative integer, is the multiplication of all integers smaller than or equal to n. For example factorial of 6 is 6*5*4*3*2*1 which is 720.
The factorial of a negative number doesn't exist. And, the factorial of 0 is 1.
*/

//Iterative Approach

//Method 1

class Solution{
    static long factorial(int num){
       if(num==0)
         return 1L; //0! =1
         
       long fact=1L; //1! =1
       for(int i=num;i>0;i--) // or for(int i=1;i<=num;i++)
         fact=fact*i;
          
       return fact;
    }
}

//Method 2- Using BigInteger class

import java.math.BigInteger;

class Solution{
    static long factorial(int num){
      BigInteger fact=new BigInteger("1"); //Or BigInteger.ONE
 
      for(int i=num;i>0;i--) // or for(int i=1;i<=num;i++)
        fact=fact.multiply(BigInteger.valueOf(i));
 
      return fact.longValue();
    }
}

//Method 3- Using Dynamic programming

class Solution{
    static long factorial(int n){
       if(n==0)
         return 1L; //0! =1
       
       long[]fact=new long[n+1];//fact[i]=factorial(i)
       fact[1]=1L; //1! = 1
       
       for(int i=2;i<(n+1);i++)
         fact[i]=i*fact[i-1];
       
       return fact[n];
    }
}


//Recursive Approach

public class Solution{
   public static long factorial(int num){
      if(num==0) //Base Case (Factorial of 0 is 1)
	 return 1L;

      return (num*factorial(num-1));
   }
}
