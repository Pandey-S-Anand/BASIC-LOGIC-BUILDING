//Without Recursion

//Method 1:Using Extra Space

class Solution {
    public void reverse(int[] array) {
        int[] temp = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            temp[i] = array[array.length - 1 - i];
        }
        System.arraycopy(temp, 0, array, 0, array.length);
    }
}



//Method 2: Without using Extra Space

class Solution {
    public void reverse(int[] array) {
        for (int i = 0; i < array.length / 2; i++) {
            int temp = array[i];
            array[i] = array[array.length - 1 - i];
            array[array.length - 1 - i] = temp;
        }
    }
}


//Using Recursion 

//Method 1 : Reverse the entire array

class Solution {
    public void reverse(int[] array, int index) { // Initial value of index is 0
        if (index == array.length / 2) {
            return;
        }
        swapElements(array, index, array.length - 1 - index);
        reverse(array, index + 1);
    }

    private void swapElements(int[] array, int firstIndex, int secondIndex) {
        int temp = array[firstIndex];
        array[firstIndex] = array[secondIndex];
        array[secondIndex] = temp;
    }
}



//Aliter 

//Method 2 : Reverse the array within the desired range of indices

class Solution {
    public void reverse(int[] array, int startIndex, int endIndex) {
        if (startIndex >= endIndex) {
            return;
        }
        swapElements(array, startIndex, endIndex);
        reverse(array, startIndex + 1, endIndex - 1);
    }

    private void swapElements(int[] array, int firstIndex, int secondIndex) {
        int temp = array[firstIndex];
        array[firstIndex] = array[secondIndex];
        array[secondIndex] = temp;
    }
}
