//Without Recursion

class Solution {
    public int[] minAnd2ndMin(int arr[]) {
        int min = Integer.MAX_VALUE, secondMin = Integer.MAX_VALUE;

        for (int num : arr) {
            if (num < min) {
                secondMin = min;
                min = num;
            } else if ((num > min) && (num < secondMin)) {
                secondMin = num;
            }
        }

        return secondMin == Integer.MAX_VALUE ? new int[] { -1, -1 } : new int[] { min, secondMin };
    }
}


//Using Recursion

class Solution {
    public int[] minAnd2ndMin(int arr[]) {
        return minAnd2ndMin(arr, Integer.MAX_VALUE, Integer.MAX_VALUE);
    }

    private int[] minAnd2ndMin(int arr[], int min, int secondMin) {
        if (arr.length == 0) {
            return secondMin == Integer.MAX_VALUE ? new int[] { -1, -1 } : new int[] { min, secondMin };
        }

        if (arr[0] < min) {
            return minAnd2ndMin(Arrays.copyOfRange(arr, 1, arr.length), arr[0], min);
        }

        if ((arr[0] > min) && (arr[0] < secondMin)) {
            return minAnd2ndMin(Arrays.copyOfRange(arr, 1, arr.length), min, arr[0]);
        }

        return minAnd2ndMin(Arrays.copyOfRange(arr, 1, arr.length), min, secondMin);
    }
}
