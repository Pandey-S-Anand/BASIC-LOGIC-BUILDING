//Bruteforce Approach

class Solution {
    public static boolean isDistinctArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return false;
                }
            }
        }
        return true;
    }
}


//Improved Approach

class Solution {
    public static boolean isDistinctArray(int[] arr) {
        Arrays.sort(arr);

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == arr[i + 1]) {
                return false;
            }
        }

        return true;
    }
}


//Good Approach

class Solution {
    public static boolean isDistinctArray(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val : frequencyMap.keySet()) {
            if (frequencyMap.get(val) > 1) {
                return false;
            }
        }

        return true;
    }
}


//Better Approach

class Solution {
    public static boolean isDistinctArray(int[] arr) {
        Set<Integer> uniqueElements = new HashSet<>();

        for (int value : arr) {
            if (uniqueElements.contains(value)) {
                return false;
            } else {
                uniqueElements.add(value);
            }
        }

        return true;
    }
}



//Optimal Approach (since Set cannot contain duplicates, so if array size and HashSet size then it can be concluded that array has all distinct or unique elements otherwise its not)

class Solution {
    public static boolean isDistinctArray(int[] arr) {
        Set<Integer> uniqueElements = new HashSet<>();

        for (int val : arr) {
            uniqueElements.add(val);
        }

        return arr.length == uniqueElements.size();
    }
}
