/*
  
   Ex 1:
   num1=4
   num2=8
   
   Multiples of 4 :  4 , 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 44 , 48 , 52 , 56 , 60 , 64....
   Multiples of 8 :  8 , 16 , 24 , 32 , 40 , 48 , 56 , 64 , 72 , 80 , 88 , 96 , 104 , 112 , 120 , 128 .....
  
   Common Multiples of 4 and 8 : 8 ,16 ,24 ,32 ,40 ,48....
  
   Least Common Multiple of 4 and 8 : 8

   Ex 2:
   num1=8
   num2=12
  
   Multiples of 8 :  8 , 16 , 24 , 32 , 40 , 48 , 56 , 64 , 72 , 80 , 88 , 96 , 104 , 112 , 120 , 128 .....
  Multiples of 12 : 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 132 , 144 , 156 , 168 , 180 , 192 ....
  
  Common Multiples of 8 and 12 : 24 ,48 ,72 ,96 ,120....
  
  Least Common Multiple of 8 and 12 : 24
  
*/

//Iterative Approach 

class Solution {
    public static int findLCM(int num1, int num2) {
        int largerNum = Math.max(num1, num2);
        int smallerNum = Math.min(num1, num2);
        int currentMultiple = largerNum;

        while (true) {
            if ((currentMultiple % smallerNum) == 0) {
                break;
            }

            currentMultiple += largerNum; // This is essentially a multiple of largerNum (i.e., currentMultiple = (largerNum * i), where i = 2, 3, 4, 5, ...)
        }

        return currentMultiple;
    }
}


//Recurssive Approach

class Solution {
    public static int findLCM(int num1, int num2) {
        int largerNum = Math.max(num1, num2);
        int smallerNum = Math.min(num1, num2);

        return lcm(smallerNum, largerNum, largerNum);
    }

    private static int lcm(int smallerNum, int largerNum, int currentMultiple) {
        // Base case: if currentMultiple is divisible by smallerNum, we've found the LCM
        if (currentMultiple % smallerNum == 0) {
            return currentMultiple;
        }

        // Recursive case: increment by largerNum to check the next multiple
        return lcm(smallerNum, largerNum, currentMultiple + largerNum);
    }
}
