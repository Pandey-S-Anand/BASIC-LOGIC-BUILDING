/*
The Fibonacci numbers are the numbers in the following integer sequence.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..

In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation 

Fn = Fn-1 + Fn-2
*/

//Iterative Version :

class Solution {
    public int fib(int n) {
        int a = -1, b = 1, c = Integer.MAX_VALUE;
        
        for (int i = 0; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }

        return c;
    }
}


//Recurssive Approach

class Solution {
    public int fib(int n) {
        if (n <= 1) {
            return n;
        }

        return (fib(n - 1) + fib(n - 2));
    }
}


//Memoized Approach

class Solution {
    private int[] cache;

    public int fib(int n) {
        cache = new int[n + 1];
        Arrays.fill(cache, -1);
        return fibonacci(n);
    }

    private int fibonacci(int n) {
        if (n <= 1) {
            return n;
        }

        if (cache[n] != -1) {
            return cache[n];
        }

        return cache[n] = (fibonacci(n - 1) + fibonacci(n - 2));
    }
}


//Dynamic Programming

class Solution {
    public int fib(int n) {
        if (n == 0) {
            return 0;
        }

        int[] fibonacci = new int[n + 1];
        fibonacci[0] = 0;
        fibonacci[1] = 1;

        for (int i = 2; i <= n; i++) {
            fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
        }

        return fibonacci[n];
    }
}
