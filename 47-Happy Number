/* 
A number will not be a Happy Number when it makes a loop in its sequence /touches a number in sequence which already been touched/Forms a Cycle.
So to check whether a number is happy or not, we can keep a set, if the same number occurs again we flag result as not happy. 

Ex 1: 

A good way to get started with a question like this is to make a couple of examples. Let's start with the number 7. 
The next number will be 49 (as 7^2 = 49), and then the next after that will be 97 (as 4^2 + 9^2 = 97)
We can continually repeat the process of squaring and then adding the digits until we get to 1.
Because we got to 1, we know that 7 is a happy number, and the function should return true.

7 -> 49 -> 97 -> 130 -> 10 -> 1


Ex 2:

As another example, let's start with 116. By repeatedly applying the squaring and adding process, we eventually get to 58,and then a bit after that, we get back to 58. 
Because we are back at a number we've already seen, we know there is a cycle, and therefore it is impossible to ever reach 1. 
So for 116, the function should return false.                         
                     
                          145 - 42  
                          /      \
                        89        20
116 -> 38 -> 73 -> 58 -/           |
                       \          4
                        37 - 16 -/
*/      

//Method 1

class Solution {
    public boolean isHappy(int num) {
      HashSet<Integer>hs=new HashSet<>();
	    
      while(true)
      {
	        int sumSqr=0;
          while(num!=0)
          {
              sumSqr+=(num%10)*(num%10);
              num=num/10;
          }
            
          if(sumSqr==1)
            return true;
          else if(hs.contains(sumSqr))
            return false;
          else
          {
             hs.add(sumSqr);
             num=sumSqr;  
          }         
      }
    }
}

//Method 2 - HardCoding The Only Cycle

class Solution {
    public boolean isHappy(int num) {
     while(num!=4 && num!=16 && num!=37 && num!=58 && num!=89 && num!=145 && num!=42 && num!=20)
     {
        int sumSqr=0;
        while(num!=0)
        {
           sumSqr+=(num%10)*(num%10);
           num=num/10;
        }
            
        if(sumSqr==1)
          return true;
        else
          num=sumSqr;  
     }
	    
      return false;
    }
}
