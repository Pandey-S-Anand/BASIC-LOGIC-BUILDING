/*Q-To Print


                    0                     
                  1 2 1                   
                2 3 4 3 2                 
              3 4 5 6 5 4 3               
            4 5 6 7 8 7 6 5 4             
          5 6 7 8 9 0 9 8 7 6 5           
        6 7 8 9 0 1 2 1 0 9 8 7 6         
      7 8 9 0 1 2 3 4 3 2 1 0 9 8 7       
    8 9 0 1 2 3 4 5 6 5 4 3 2 1 0 9 8     
  9 0 1 2 3 4 5 6 7 8 7 6 5 4 3 2 1 0 9   
0 1 2 3 4 5 6 7 8 9 0 9 8 7 6 5 4 3 2 1 0 
  9 0 1 2 3 4 5 6 7 8 7 6 5 4 3 2 1 0 9   
    8 9 0 1 2 3 4 5 6 5 4 3 2 1 0 9 8     
      7 8 9 0 1 2 3 4 3 2 1 0 9 8 7       
        6 7 8 9 0 1 2 1 0 9 8 7 6         
          5 6 7 8 9 0 9 8 7 6 5           
            4 5 6 7 8 7 6 5 4             
              3 4 5 6 5 4 3               
                2 3 4 3 2                 
                  1 2 1                   
                    0 

*/

// Figure Specific Code

class Solution {
    public static void pattern() {
        int k = 0;
        for (int row = 1; row <= 21; row++) {
            if (row <= 11) {
                k++;
            } else {
                k--;
            }

            int data = k - 1;
            for (int column = 1; column <= 21; column++) {
                if (column >= (12 - k) && column <= (10 + k)) {
                    System.out.print((data % 10) + " ");
                    if (column < 11) {
                        data++;
                    } else {
                        data--;
                    }
                } else {
                    System.out.print("  ");
                }
            }
            System.out.println();
        }
    }
}
