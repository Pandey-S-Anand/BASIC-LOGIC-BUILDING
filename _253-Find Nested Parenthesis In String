//Using Recursion

class Solution {
    public boolean nestParen(String str) {
        return nestParenHelper(str, 0, str.length() - 1);
    }

    private boolean nestParenHelper(String str, int start, int end) {
        if (start > end) {
            return true; // Base case: all pairs are valid
        }

        if (str.charAt(start) == '(' && str.charAt(end) == ')') {
            return nestParenHelper(str, start + 1, end - 1); // Check the inner part
        }

        return false; // Invalid if current pair is not matching
    }
}


//Without Using Recursion

class Solution {
    public boolean nestParen(String str) {
        if (str.length() % 2 != 0) {
            return false;
        }

        for (int i = 0; i < (str.length() / 2); i++) {
            if (str.charAt(i) != '(' || str.charAt(str.length() - 1 - i) != ')') {
                return false;
            }
        }

        return true;
    }
}
