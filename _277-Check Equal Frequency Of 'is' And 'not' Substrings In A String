//Using Recursion

class Solution {
    public boolean equalIsNot(String str) {
        return equalIsNotHelper(str, 0, 0) == 0;
    }

    private int equalIsNotHelper(String str, int index, int count) {
        // Base case: if fewer than 2 characters remain, return the count
        if (index + 1 >= str.length()) {
            return count;
        }

        // Check if "is" starts at the current index
        if (str.startsWith("is", index)) {
            return equalIsNotHelper(str, index + 2, count + 1);
        }

        // Check if "not" starts at the current index
        if (str.startsWith("not", index)) {
            return equalIsNotHelper(str, index + 3, count - 1);
        }

        // Otherwise, move to the next character
        return equalIsNotHelper(str, index + 1, count);
    }
}


//Without Recursion

class Solution {
    public boolean equalIsNot(String str) {
        int i = 0, count = 0;

        while (i < str.length()) {
            if (str.startsWith("is", i)) {
                i += 2;
                count++;
            } else if (str.startsWith("not", i)) {
                i += 3;
                count--;
            } else {
                i++;
            }
        }

        return count == 0;
    }
}
