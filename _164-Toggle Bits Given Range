//Bruteforce Approach

class Solution {
    static int toggleBits(int n , int low , int high) {
       for(int k=low;k<=high;k++)
          n=toggleKthBit(n,k);
	   
       return n;  
    }
    
    public static int toggleKthBit(int num,int k)
    {
       int mask=1<<(k-1);
       int res=num^ mask;
       return res;
    }
}

//Better Approach

class Solution {
   static int toggleBits(int n , int low , int high) {
      int ans=0,powerOf2=1;
      low--;
      high--;
    
      for(int i=0;i<32;i++)
      {
        int mask=1<<i;
        
        if(i<low)
        {
          if((mask&n)!=0)
            ans+=powerOf2; 
        }
        else if(i>=low && i<=high)
        {
          if((mask&n)==0)
            ans+=powerOf2; 
        }
        else//if(i>end && i<32)
        {
          if((mask&n)!=0)
            ans+=powerOf2;
        }
        
        powerOf2*=2;
      }
      
      return ans;
   }
}


//Aliter Implementation

class Solution {
    static int toggleBits(int n , int low , int high) {
      int ans=0;
      low--;
      high--;
      for(int i=0,pwr=0;i<32;i++,pwr++)
      {
        int mask=1<<i;
        
        if(i<low)
        {
          if((mask&n)!=0)
            ans+=1<<pwr; //x<<y => x*(2^y)
        }
        else if(i>=low && i<=high)
        {
          if((mask&n)==0)
            ans+=1<<pwr; //x<<y => x*(2^y)
        }
        else//if(i>end && i<32)
        {
          if((mask&n)!=0)
            ans+=1<<pwr;
        }
      }
      
      return ans;
    }
}


//Optimal Approach

class Solution {
    static int toggleBits(int n , int low , int high) {
        int mask=(1<<(high-low+1));
        mask=mask-1;
        mask=mask<<(low-1);
        int res=n ^ mask;
	
        return res;  
    }
}
