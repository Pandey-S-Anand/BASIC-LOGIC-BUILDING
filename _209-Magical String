//Bruteforce Approach

class Solution {
    private static final Map<Character, Character> reverseAlphabetMap = Map.ofEntries(
            Map.entry('a', 'z'),
            Map.entry('b', 'y'),
            Map.entry('c', 'x'),
            Map.entry('d', 'w'),
            Map.entry('e', 'v'),
            Map.entry('f', 'u'),
            Map.entry('g', 't'),
            Map.entry('h', 's'),
            Map.entry('i', 'r'),
            Map.entry('j', 'q'),
            Map.entry('k', 'p'),
            Map.entry('l', 'o'),
            Map.entry('m', 'n'),
            Map.entry('n', 'm'),
            Map.entry('o', 'l'),
            Map.entry('p', 'k'),
            Map.entry('q', 'j'),
            Map.entry('r', 'i'),
            Map.entry('s', 'h'),
            Map.entry('t', 'g'),
            Map.entry('u', 'f'),
            Map.entry('v', 'e'),
            Map.entry('w', 'd'),
            Map.entry('x', 'c'),
            Map.entry('y', 'b'),
            Map.entry('z', 'a'));

    static String magicalString(String str) {
        StringBuilder magicalString = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            magicalString.append(reverseAlphabetMap.get(str.charAt(i)));
        }

        return magicalString.toString();
    }
}


//Better Approach

class Solution {
    private static final char[] reverseAlphabetArray = {
            'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o',
            'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c',
            'b', 'a'
    };

    static String magicalString(String str) {
        StringBuilder magicalString = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            magicalString.append(reverseAlphabetArray[str.charAt(i) - 'a']);
        }

        return magicalString.toString();
    }
}


//Optimal Approach

class Solution {
    static String magicalString(String str) {
        StringBuilder magicalString = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            magicalString.append((char) ('z' - (str.charAt(i) - 'a')));
        }

        return magicalString.toString();
    }
}
