//Bruteforce Approach

class Solution {
    public double myPow(double x, int n) {
      long p=n;
      
      if(p==0 || x==1D) // x^0 ==1 also 1 ^ n ==1
        return 1D;
      
      if(p==1)
       return x;

      if(x==0D)
       return 0D;
        
      if(p > 0)
        return result(x,p);
      else //(p<0)
        return(1/result(x,Math.abs(p))); 
    }

    public static double result(double base, long power)
    {
       double res=1D;
       for(long exp=1;exp<=power;exp++)
         res=res*base;
         
       return res;
    }
}


/*
Optimal Approach :

In order to improve efficiency we will opt for Binary Exponentiation using which we can calculate base^power using O log2(power) multiplications.

Basic Idea is to divide the work using binary representation of exponents
i.e. is to keep multiplying res with base, if the bit is ON, and keep multiplying base with itself until we get power as 0

Ex-
base= 7, power = 11 and res= 1
Here, we have to calculate 7^11

Binary of power i.e (11) is (1011)
 1    0    1    1
2^3  2^2  2^1  2^0   <-- Corresponding place values of each bit

OR we can also write this as
1 0 1 1
8 4 2 1 <-- Corresponding place values of each bit

Now, 7^8 × 7^2 × 7^1 == 5764801 × 49 × 7 == 1977326743 <-- Desired Output

NOTE: We have not considered 7^4 in this case as the 3rd place bit is OFF

Now, applying logic keeping this concept in mind
*/


//Naive Implementation

class Solution {
    public double myPow(double x, int n) {
      long p=n;
      
      if(p==0 || x==1D) // x^0 ==1 also 1 ^ n ==1
        return 1D;
      
      if(p==1)
       return x;

      if(x==0)
       return 0D;
        
      if(p > 0)
        return result(x,p);
      else //(p<0)
        return(1/result(x,Math.abs(p))); 
    }

    public double result(double base, long power)
    {
       double res=1d;
       int powerOf2=1; //2^0=1
       
       for(int i=0;i<32;i++)
       {
          int mask=1<<i;
          if((power & mask)!= 0) //If Bit is ON
             res=res*(int)Math.pow(base,powerOf2);
            
           powerOf2*=2;
        }
        
       return res;
    }
}


//Optimal Implementation

class Solution {
    public double myPow(double x, int n) {
      long p=n;
      
      if(p==0 || x==1D) // x^0 ==1 also 1 ^ n ==1
        return 1D;
      
      if(p==1)
       return x;

      if(x==0D)
       return 0D;
        
      if(p > 0)
        return result(x,p);
      else //(p<0)
        return(1/result(x,Math.abs(p))); 
    }

    public double result(double base, long power)
    {
       double res=1d;
       for(int i=0;i<32;i++)
       {
          int mask=1<<i;
          if((power & mask)!= 0) //If Bit is ON
             res=res*base;
            
           base=base*base;
        }
        
       return res;
    }
}


//Aliter

class Solution {
    public double myPow(double x, int n) {
      long p=n;
      
      if(p==0 || x==1D) // x^0 ==1 also 1 ^ n ==1
        return 1D;
      
      if(p==1)
       return x;

      if(x==0D)
       return 0D;
        
      if(p > 0)
        return result(x,p);
      else //(p<0)
        return(1/result(x,Math.abs(p))); 
    }

    public double result(double base, long power)
    {
       double res=1d;
       while(power!=0)
       {
           if((power & 1)!= 0) //If Bit is ON
             res=res*base;
            
           base=base*base;
           power=power>>1;
        }

       return res;
    }
}
