/*
   Ex - (1   0   1   1   0   1   1)
        2^6 2^5 2^4 2^3 2^2 2^1 2^0
        
       (2^6)*1 + (2^5)*0 + (2^4)*1 + (2^3)*1 + (2^2)*0 + (2^1)*1 + (2^0)*1 =  1+2+8+16+64= 91.
*/

//Method 1 : 

//Bruteforce Implementation

class Solution {
    public static int binaryToDecimal(int binaryNumber) {
        int power = 0;
        int decimalValue = 0;
        
        while (binaryNumber != 0) {
            int lastDigit = binaryNumber % 10;
            decimalValue += lastDigit * (int) Math.pow(2, power); 
            binaryNumber /= 10;
            power++;
        }
        
        return decimalValue;
    }
}



//Better Implementation :

class Solution {
    public static int binaryToDecimal(int binary) {
        int exponent = 0;
        int decimalValue = 0;

        while (binary != 0) {
            int remainder = binary % 10;
            if (remainder == 1) {
                decimalValue += (int) Math.pow(2, exponent);
            }

            binary /= 10;
            exponent++;
        }

        return decimalValue;
    }
}


//Optimal Implementation 

class Solution {
    public static int binaryToDecimal(int binaryNumber) { 
        int currentPowerOfTwo = 1; // 2^0 = 1
        int decimalValue = 0;

        while (binaryNumber != 0) {
            if ((binaryNumber % 10) == 1) {
                decimalValue += currentPowerOfTwo; 
            }
            
            currentPowerOfTwo *= 2; // Double the power of 2 for the next bit
            binaryNumber /= 10; // Remove the last digit of the binary number
        }

        return decimalValue;
    }
}


// When Input is in the Form Of a String

// Method 1

class Solution {
    public int binaryToDecimal(String bin) {
        int decValue = 0;
        int powerOf2 = 1; // 2^0
        
        for (int i = bin.length() - 1; i >= 0; i--) {
            if (bin.charAt(i) == '1') {
                decValue += powerOf2;
            }
            
            powerOf2 = powerOf2 * 2;
        }
        
        return decValue;
    }
}



    
//Method 2 (Using inbuilt Method)

class Solution {
    public int binaryToDecimal(String binaryString) {
        int decimalValue = Integer.parseInt(binaryString, 2); 
        return decimalValue;
    }
}
