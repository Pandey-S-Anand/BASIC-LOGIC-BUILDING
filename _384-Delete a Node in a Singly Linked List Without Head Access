/*
 * Why is the node not the last node?
 * 
 * The given node is guaranteed not to be the last node because the deletion strategy 
 * involves copying the value of the next node into the current node. The final step is 
 * detaching the last node by setting the next pointer of the second-to-last node to null, 
 * effectively removing the last node from the list.
 * 
 * Why are all values distinct?
 * 
 * If the node values were not distinct, there would be ambiguity in identifying which node 
 * has been deleted based solely on the list structure after the operation. Distinct values 
 * ensure that the modified list maintains a clear and unambiguous state after the deletion operation.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        ListNode currentNode = node;
        ListNode prevNode = null;

        while (currentNode.next != null) {
            // Copy the value of the next node into the current node
            currentNode.val = currentNode.next.val;
            // Move prevNode and currentNode one step ahead
            prevNode = currentNode;
            currentNode = currentNode.next;
        }
        // Set the next pointer of prevNode to null, effectively removing the last node
        prevNode.next = null;
    }
}
