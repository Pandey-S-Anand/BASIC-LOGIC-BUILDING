//Using Recursion

class Solution{
   public boolean gHappy(String str) {
     return gHappy(str,false);
   }

   public boolean gHappy(String str,boolean immediateGOnLeft) {
      if(str.length()<2){
        if(str.length()==1 && str.charAt(0)=='g' && !immediateGOnLeft){
           return false;
        }
        return true;
      }
  
      if(str.charAt(0)=='g' && (!immediateGOnLeft && str.charAt(1)!='g')){
        return false;
      }
  
      if(str.charAt(0)=='g'){
        immediateGOnLeft=true;
      }
      
      if(str.charAt(0)!='g' && immediateGOnLeft){
        immediateGOnLeft=false;
      }
  
      return gHappy(str.substring(1),immediateGOnLeft);
   }
}

//Optimised Implementation

class Solution{
   public boolean gHappy(String str) {
     return gHappy(str,false);
   }

   public boolean gHappy(String str,boolean immediateGOnLeft) {
      if(str.length()<2){
        if(str.length()==1 && str.charAt(0)=='g' && !immediateGOnLeft){
           return false;
        }
        return true;
      }
  
      if(str.charAt(0)=='g' && (!immediateGOnLeft && str.charAt(1)!='g')){
        return false;
      }
  
      if(str.charAt(0)=='g'){
        return gHappy(str.substring(1),true);
      }

      return gHappy(str.substring(1),false);
   }
}


//Without Recursion

class Solution{
  public boolean gHappy(String str) {
    int n=str.length();

    for(int i=0;i<n;i++){
      if(str.charAt(i)=='g'){
        if((i>0 && i<(n-1)) && (str.charAt(i-1)!='g' && str.charAt(i+1)!='g')){
          return false;
        }else if(n==1 || (i==0 && str.charAt(i+1)!='g')){
          return false;
        }else if(i==(n-1) && str.charAt(i-1)!='g'){
          return false;
        }
      }
    }
    return true;
  }
}
