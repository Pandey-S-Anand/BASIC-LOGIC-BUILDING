//Without Recursion

//Naive Approach

class Solution{ 
    public static int findSum(int arr[]){
      return smallest(arr)+largest(arr);
    }
    
    public static int smallest(int arr[]){
      int minIndex=0;

      for(int i=1;i<arr.length;i++){
	if(arr[i]<arr[minIndex]){
	   minIndex=i;
        }
      }

      return arr[minIndex];   
    }
    
    public static int largest(int arr[]){
      int maxIndex=0;
      
      for(int i=1;i<arr.length;i++){
	 if(arr[i]>arr[maxIndex]){
	    maxIndex=i;
         }
      }
		
      return arr[maxIndex];   
    }
}


//Optimal Approach

class Solution{ 
    public static int findSum(int arr[]){
       int minIndex=0,maxIndex=0;

       for(int i=1;i<arr.length;i++){
         if(arr[i]<arr[minIndex]){
	    minIndex=i;
	 }

	 if(arr[i]>arr[maxIndex]){
	    maxIndex=i;
         }
       }
       
       return arr[minIndex]+arr[maxIndex];  
    }
}



//Using Recursion

class Solution{
    public static int findSum(int arr[]) {
      int[] result = findMinMax(arr);
      return result[0] + result[1];
    }

    private static int[] findMinMax(int[] arr) {
        if (arr.length == 1) {
           return new int[] { arr[0],arr[0]};
        }

        int[] subArrayResult = findMinMax(Arrays.copyOfRange(arr, 1, arr.length));

        return new int[] { Math.min(arr[0], subArrayResult[0]), Math.max(arr[0], subArrayResult[1])};
    }
}
