public class Solution {
    class Queue {
        private int front, rear;
        private int[] queue;

        Queue() {
            front = -1;
            rear = -1;
            queue = new int[100001];
        }

        public void enqueue(int num) {
            // Check if there is space to add an element
            if (rear < queue.length - 1) {
                // If the queue is empty, initialize front and rear pointers Otherwise, increment rear pointer
                if (front == -1 && rear == -1) {
                    front = rear = 0;
                } else {
                    rear++;
                }
                queue[rear] = num; // Add the element
            }
        }

        public int dequeue() {
            if (front == -1 && rear == -1) { // Queue is empty
                return -1;
            } else if (front == rear) {  // If there's only one element, reset the queue
                int removedElement = queue[front];
                front = rear = -1;
                return removedElement;
            } else { // Otherwise, return the front element and increment the front pointer
                return queue[front++];
            }
        }
    }
}
