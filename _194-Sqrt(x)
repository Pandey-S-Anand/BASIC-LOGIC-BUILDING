//Bruteforce Approach

class Solution {
    public int mySqrt(int x) {
       return (int)Math.sqrt(x); 
    }
}


/* Optimal Approach :

  sqrt(49)=7
  in other words 7 is the squareRoot of 49 if(7*7) =49
  
  SquareRoot of all non-negative Integers lies within the Range [0,number itself] i.e 0<=sqrt(x)<=x
   Number (N)  Square root (âˆšN)
     0          0.000
     1		1.000
     2		1.414
     3		1.732
     4		2.000
     ....
*/


class Solution {
    public int mySqrt(int x) {
       return BinarySearch(x);    
    }

    public static int BinarySearch(int x)
    {
      int low = 0,high = x,ans =-1;

      while(low<=high)
      {
        long mid=low+(high-low)/2;
        if((mid*mid)==x) //for Perfect Square Numbers
          return (int)mid;
        else if((mid*mid)<x)
        {
           ans=(int)mid; //we are maintaining this for Non Perfect Square Numbers
           low=(int)mid+1;
        }
        else//if((mid*mid)>x)
          high= (int)mid-1;
      }
      return ans;
    }
}


/* Further Optimised :

No non-negative integer has SquareRoot == 0 (except 0 i.e sqrt(0)==0)
Similarly No non-negative integer has SquareRoot == number itself (except 1 i.e sqrt(1)==1)
Both the Cases Are Already Handled so the SquareRoot of all the Numbers (Except 0 and 1) lies within the Range [1,number-1] i.e i.e 1<=sqrt(x)<=(x-1) 
  
Important TestCase :
x=5;

The Control was not supposed to enter Inside  the if statement ( i.e if((x/mid)==mid) return mid;)
coz this if statement is only meant for perfect Square numbers (and 5 is not a perfect Square number).
However Code gives the Correct Output as we are only Concerned about the integer part of the Squareroot of Non perfect Square Numbers.
However this code fails if we are asked to check whether the given number 'x' is a perfect square Number ,it will output "true" for x==5. 
  
 */


class Solution {
    public int mySqrt(int x) {
      if(x == 0 || x==1)
        return x;

      int low = 1,high =x-1,ans=-1;

      while(low<=high)
      {
        int mid=low+(high-low)/2;

        if(mid==(x/mid)) //for Perfect Square Numbers
          return mid;
        else if(mid<(x/mid))
        {
          ans=mid; //we are maintaining this for Non Perfect Square Numbers
          low=mid+1;
        }
        else//if(mid>(x/mid))
          high= mid-1;
      }
      
      return ans;
    }
}
