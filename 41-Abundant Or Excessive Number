/*
an abundant number or excessive number is a number for which the sum of its proper divisors is greater than the number.
The integer 12 is the first abundant number. Its proper divisors are 1, 2, 3, 4 and 6 for a total of 16. 
The amount by which the sum exceeds the number is the abundance. The number 12 has an abundance of 4, for example.
The first 28 abundant numbers are:

12, 18, 20, 24, 30, 36, 40, 42, 48, 54, 56, 60, 66, 70, 72, 78, 80, 84, 88, 90, 96, 100, 102, 104, 108, 112, 114, 120, ... 
*/

class Solution {
    public boolean isAbundant(int num) {
        return sumProperDivisor(num) > num;
    }

    private int sumProperDivisor(int num) {
        if (num == 1) {
            return 0;
        }

        int sum = 0, sqrRoot = (int) Math.sqrt(num);

        for (int i = 1; i <= sqrRoot; i++) {
            if ((num % i) == 0) {
                sum += i;

                if (i != 1 && i != (num / i)) {
                    sum += (num / i);
                }
            }
        }

        return sum;
    }
}

/*
The divisors/Factors of 100 are: 1 2 4 5 10 20 25 50 100.
     
If we look carefully, all the divisors are present in pairs. For example if n = 100,
then the various pairs of divisors are: (1,100),   (2,50),   (4,25),    (5,20),   (10,10).
                                            |        |          |          |          |
                                        (1,100/1) (2,100/2) (4,100/4)  (5,100/5) (10,100/10)
so all we need to do is generate 1,2,4,5 and 10 which can be generated by Running a loop from 1 to Sqrt(n) (both Inclusive).
Using this fact we could speed up our program significantly. We,however, have to be careful if there are two equal divisors as in the case of (10, 10).
In such case, weâ€™d print only one of them. 
*/
