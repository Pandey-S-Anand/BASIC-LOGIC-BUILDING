//Method 1 (Using Extra Space)

class Solution {
    public static void rightRotateByKQuickly(int[] arr, int n, int k) {
        k = k % n;
        int[] twice = new int[2 * n];

        for (int i = 0; i < n; i++) {
            twice[i] = twice[n + i] = arr[i];
        }

        System.out.printf("Array Formed After %d Rotations To the Right is:\n", k);
        for (int i = n - k; i < (2 * n) - k; i++) {
            System.out.println(twice[i]);
        }
    }
}


//Method 2(Without Extra Space)

class Solution {
    public static void rightRotateByKQuickly(int[] arr, int n, int k) {
        k = k % n;
        System.out.printf("Array Formed After %d Rotations To the Right is:\n", k);
        for (int i = (n - k); i < (2 * n) - k; i++) {
            System.out.println(arr[i % n]);
        }
    }
}

/*
arr[]={10,20,30,40,50,60,70}
k=3

This is how final output array will look like :

arr[]={50,60,70,10,20,30,40}

> i=4
4%7=4
print(arr[4]) i.e 50

> i=5
5%7=5
print(arr[5]) i.e 60

> i=6
6%7=6
print(arr[6]) i.e 70

> i=7
7%7=0
print(arr[0]) i.e 10

> i=8
8%7=1
print(arr[1]) i.e 20

> i=9
9%7=2
print(arr[2]) i.e 30

> i=10
10%7=3
print(arr[3]) i.e 40

*/
