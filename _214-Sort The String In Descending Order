//Bruteforce Approach

class Solution { 
    String ReverseSort(String str) { 
        char[]arr=str.toCharArray();
        Arrays.sort(arr);
        reverse(arr);
        return new String(arr);
    }
    
    private void reverse(char[]arr){
       int start=0,end=arr.length-1;
       
       while(start<end){
           char temp=arr[start];
           arr[start++]=arr[end];
           arr[end--]=temp;
       }
    }
}



//Optimal Approach

class Solution {
    String ReverseSort(String str) {
        int[] frequencyArray = new int[26];
        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        StringBuilder reverseSorted = new StringBuilder();

        for (int i = frequencyArray.length - 1; i >= 0; i--) {
            while (frequencyArray[i] != 0) {
                reverseSorted.append((char) (i + 'a'));
                frequencyArray[i]--;
            }
        }

        return reverseSorted.toString();
    }
}

//Aliter

class Solution {
    String ReverseSort(String str) {
        int[] frequencyArray = new int[26];
        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        StringBuilder reverseSorted = new StringBuilder(str.length());

        for (int i = frequencyArray.length - 1; i >= 0; i--) {
            if (frequencyArray[i] != 0) {
                reverseSorted.append(String.valueOf((char) (i + 'a')).repeat(frequencyArray[i]));
            }
        }

        return reverseSorted.toString();
    }
}
