// Method 1 - Without String

//=>Iterative approach

class Solution {
    public int subtractProductAndSum(int num) {
        int sum = 0, product = 1;

        while (num != 0) {
            sum += (num % 10);
            product *= (num % 10);
            num = num / 10;
        }

        return product - sum;
    }
}


//=>Recursive approach

class Solution {
    public int subtractProductAndSum(int num) {
        return productMinusSum(num, 1, 0);
    }

    private int productMinusSum(int n, int prod, int sum) {
        if (n == 0) {
            return prod - sum;
        }

        return productMinusSum(n / 10, prod * (n % 10), sum + (n % 10));
    }
}


//Aliter

class Solution {
    public int subtractProductAndSum(int n) {
        int[] results = subtractProductAndSumHelper(n);
        return results[0] - results[1];
    }

    private int[] subtractProductAndSumHelper(int n) {
        if (n == 0) {
            return new int[] { 1, 0 }; // Base case: product is 1, sum is 0
        }
        int lastDigit = n % 10;
        int[] resultsFromRemainingDigits = subtractProductAndSumHelper(n / 10);
        resultsFromRemainingDigits[0] *= lastDigit; // Multiply the product by the last digit
        resultsFromRemainingDigits[1] += lastDigit; // Add the last digit to the sum

        return resultsFromRemainingDigits;
    }
}



//Method 2 - With String

class Solution {
    public int subtractProductAndSum(int n) {
        String num = Integer.toString(n);
        int product = 1, sum = 0;

        for (int i = 0; i < num.length(); i++) {
            product *= (num.charAt(i) - '0');
            sum += (num.charAt(i) - '0');
        }

        return product - sum;
    }
}
