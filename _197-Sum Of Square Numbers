/*
    Maths Explaination :

    a^2 + b^2 =c;
   
    Possible values of a =0,1,2,3,4,5,6...... (Even if you take -ve values of 'a' the a^2 will remain the same)
    i.e Possible values of a^2 =0,1,4,9,16,25,36......
                            
    Similarly;

    Possible values of b =0,1,2,3,4,5,6......(Even if you take -ve values of 'b' the b^2 will remain the same)
    i.e Possible values of b^2 =0,1,4,9,16,25,36......
    
    if you observe Carefully all these possible values of a^2 and b^2 are perfect Squares.(an we already know how to check  perfect Squares).
    
    How to derieve Condition?
    
    minimum possible value of b^2=0;
    which gives maximum possible value of a^2 i.e a^2 =c;
    
    thus generalised (while loop)condition is a^2<=c or a<=Math.sqrt(c);
    
    Or

    minimum possible value of a^2=0;
    which gives maximum possible value of b^2 i.e b^2 =c;
    
    thus generalised (while loop)condition is  : b^2<=c or b<=Math.sqrt(c);
   
    Conclusion :
    minimum possible value of a =0
    minimum possible value of b =0
    maximum possible value of a =Math.sqrt(c);
    maximum possible value of b =Math.sqrt(c);

*/

// Method 1 - Using Binary Search

/* Intuitive Implementation :

How To Efficiently Find Next perfect square ?

The very first perfect square is important for this method. Now the original answer is hidden over this pattern i.e. 0, 1, 4, 9, 16, 25, 36, 49, 64,..... 
the difference between 0 and 1 is 1 
the difference between 1 and 4 is 3 
the difference between 4 and 9 is 5 and so onâ€¦ 
which means that the difference between two perfect squares is always an odd number.
Now, the question arises what must be added to get the next number and the answer is (sqrt(X) * 2) + 1 where X is the already known perfect square.

*/

class Solution {
    public boolean judgeSquareSum(int c) {
      int aSqr=0; //0 is the First perfect Square Number

      while(aSqr<=c)
      {
        if(isPerfectSquare(c-aSqr)) //b^2=(c-a^2);check if b^2 is perfect square or not
          return true;
	  
        aSqr=nextPerfectSquareNumber(aSqr);
      }
      return false; 
    }

    public boolean isPerfectSquare(int num)
    {
       if(mySqrt(num)!=-1)
         return true;
         
       return false;
    }
    
    public int mySqrt(int x)
    {
      int low =0,high=x;
      while(low<=high)
      {
        long mid=low+(high-low)/2;

        if(x==(mid*mid))
           return (int)mid;
        else if(x>(mid*mid))
          low=(int)mid+1;
        else//if(x<(mid*mid))
          high=(int)mid-1;
      }
      return -1;
    }
    
    public int nextPerfectSquareNumber(int num)
    {
      int next=num+(mySqrt(num)*2)+1;
      return next;
    }
}


//Optimal Implementation

class Solution {
    public boolean judgeSquareSum(int c){
      int sqrt_c=(int)Math.sqrt(c);
      for(int a=0;a<=sqrt_c;a++)
        if(isPerfectSquare(c-a*a))  //b^2=(c-a^2),check if b^2 is perfect square or not
          return true;
        
       return false;
    }
    
    public boolean isPerfectSquare(int num)
    {
       return mySqrt(num);
    }
    
    public boolean mySqrt(int x)
    {
      int low =0,high=x;
      long mid;
      while(low<=high)
      {
        mid=low+(high-low)/2;

        if(x==(mid*mid))
           return true; //x is a perfect square
        else if(x>(mid*mid))
          low=(int)mid+1;
        else //if(x<(mid*mid))
          high=(int)mid-1;
      }
      return false; //x is not a perfect square
    }
}




//Method 2 - Using Two Pointer Technique

class Solution {
    public boolean judgeSquareSum(int c) {
       /*
        lb_a=0; - minimum possible value of a =0
        lb_b=0; - minimum possible value of b =0
        ub_a=Math.sqrt(c); - maximum possible value of a =Math.sqrt(c);
        ub_b=Math.sqrt(c); - maximum possible value of b =Math.sqrt(c);
        */
        
        long a=0; // long is used to Avoid Integer Overflow
        int b=sqrt_c=(int)Math.sqrt(c);;
        
        while(a<=sqrt_c && b>=0)
        { 
            long sumOfSqr=(b*b)+(a*a); 
            
            if(sumOfSqr==c) 
              return true;
            if(sumOfSqr>c) 
              b--;
            else //(sumOfSqr<c)
              a++;
        }

      return false; 
    }
}
