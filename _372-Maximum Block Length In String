// Without Recursion

class Solution {
    public int maxBlock(String str) {
        if (str.isEmpty()) {
            return 0;
        }

        int currentBlockLength = 1, maxBlockLength = 1;

        for (int i = 1; i < str.length(); i++) {
            if (str.charAt(i) == str.charAt(i - 1)) {
                currentBlockLength++;
            } else {
                maxBlockLength = Math.max(maxBlockLength, currentBlockLength);
                currentBlockLength = 1;
            }
        }

        return Math.max(maxBlockLength, currentBlockLength);
    }
}


//Using Recursion

class Solution {
    public int maxBlock(String str) {
        if (str.isEmpty()) {
            return 0;
        }
        return maxBlockHelper(str, 1, 1, 1);
    }

    private int maxBlockHelper(String str, int index, int currentBlockLength, int maxBlockLength) {
        if (index == str.length()) {
            return Math.max(maxBlockLength, currentBlockLength);
        }

        if (str.charAt(index) == str.charAt(index - 1)) {
            return maxBlockHelper(str, index + 1, currentBlockLength + 1, maxBlockLength);
        }

        return maxBlockHelper(str, index + 1, 1, Math.max(maxBlockLength, currentBlockLength));
    }
}
