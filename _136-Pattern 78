/*Q-To Print

1     
1 1    
1 2 1   
1 3 3 1  
1 4 6 4 1 

*/  
  
// Figure Specific Code

class Solution {
    public static void pattern() {
        for (int row = 1; row <= 5; row++) {
            for (int column = 1; column <= 5; column++) {
                if (column <= row) {
                    long data = calculateFactorial(row - 1) / (calculateFactorial(row - column) * calculateFactorial(column - 1));
                    System.out.print(data + " ");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

    private static long calculateFactorial(int n) {
        long factorial = 1;
        for (int i = 1; i <= n; i++) {
            factorial *= i;
        }
        return factorial;
    }
}


// Generalized Code

class Solution {
    public static void pattern(int n) {
        for (int row = 1; row <= n; row++) {
            for (int column = 1; column <= n; column++) {
                if (column <= row) {
                    long data = calculateFactorial(row - 1) / (calculateFactorial(row - column) * calculateFactorial(column - 1));
                    System.out.print(data + " ");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

    private static long calculateFactorial(int n) {
        long factorial = 1;
        for (int i = 1; i <= n; i++) {
            factorial *= i;
        }
        return factorial;
    }
}
