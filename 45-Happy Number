/* 
A number will not be a Happy Number when it makes a loop in its sequence /touches a number in sequence which already been touched/Forms a Cycle.
So to check whether a number is happy or not, we can keep a set, if the same number occurs again we flag result as not happy. 

Ex 1: 

A good way to get started with a question like this is to make a couple of examples. Let's start with the number 7. 
The next number will be 49 (as 7^2 = 49), and then the next after that will be 97 (as 4^2 + 9^2 = 97)
We can continually repeat the process of squaring and then adding the digits until we get to 1.
Because we got to 1, we know that 7 is a happy number, and the function should return true.

7 -> 49 -> 97 -> 130 -> 10 -> 1


Ex 2:

As another example, let's start with 116. By repeatedly applying the squaring and adding process, we eventually get to 58,and then a bit after that, we get back to 58. 
Because we are back at a number we've already seen, we know there is a cycle, and therefore it is impossible to ever reach 1. 
So for 116, the function should return false.                         
                     
                          145 - 42  
                          /      \
                        89        20
116 -> 38 -> 73 -> 58 -/           |
                       \          4
                        37 - 16 -/
*/      

//Method 1


class Solution {
    public boolean isHappy(int num) {
        if (num <= 0) {
            return false; // Negative numbers and zero are not happy numbers
        }

        Set<Integer> seenSums = new HashSet<>();

        while (true) {
            int sumOfSquares = 0;

            // Calculate the sum of squares of digits
            while (num != 0) {
                int digit = num % 10;
                sumOfSquares += digit * digit;
                num /= 10;
            }

            // Check conditions
            if (sumOfSquares == 1) {
                return true; // Number is happy
            } else if (seenSums.contains(sumOfSquares)) {
                return false; // Loop detected
            }

            // Update for next iteration
            seenSums.add(sumOfSquares);
            num = sumOfSquares;
        }
    }
}


//Method 2 - HardCoding The Only Cycle

class Solution {
    public boolean isHappyNumber(int number) {
        // Loop until the number is a known non-happy number in the cycle
        while (number != 4 && number != 16 && number != 37 && number != 58 &&
               number != 89 && number != 145 && number != 42 && number != 20) {
            
            int sumOfSquares = 0;

            // Calculate the sum of squares of digits
            while (number != 0) {
                int digit = number % 10;
                sumOfSquares += digit * digit;
                number /= 10;
            }

            // If the sum equals 1, the number is happy
            if (sumOfSquares == 1) {
                return true;
            }

            // Update the number for the next iteration
            number = sumOfSquares;
        }

        // If the loop exits, the number is not happy
        return false;
    }
}
