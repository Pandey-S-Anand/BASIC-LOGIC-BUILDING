//Bruteforce Approach

class Solution{
  static int countBits(int n){
      int count=0;
	   for(int num=1;num<=n;num++)
	     for(int k=0;k<32;k++)
            if(checkKthBit(num,k)!=0)
              count++;
    return count;
  }
    
  public static int checkKthBit(int num,int k)
	{
	   int mask=1<<(k);
	   int res=num & mask;
	   return res;
	}
}


//Better Approach

class Solution{
  static int countBits(int n){
    int sum=0;
    for(int i=1;i<=n;i++)
      sum+=Integer.bitCount(i);
         
    return sum;     
  }
}

//Optimal Approach

//Intuitive Implementation 

class Solution{
    static int countBits(int n){
       if(n==0)
	     return 0;
	   
	   int x=largestPowerOf2InRange(n);
	   
	   int part1=(int)Math.pow(2,x-1)*x;
	   int part2=n-(int)Math.pow(2,x)+1;
	   int rest=n-(int)Math.pow(2,x);
	   int part3=countBits(rest);
	   
	   int count=part1+part2+part3;
	   
	   return count;
    }
    
    public static int largestPowerOf2InRange(int num)
    {
	  int power=0;
	  
	  while(true)
	    if((int)Math.pow(2,power)<=num)
	       power++;
	    else
	       break;
	       
	  return (power-1);
    }
}


//Optimal Imlementation

class Solution{
    static int countBits(int n){
       if(n==0)
	     return 0;
	   
	   int x=largestPowerOf2InRange(n);
	   
	   int part1=(1<<(x-1))*x;   //(1<<(x-1))*x => (2^(x-1))*x
	   int part2=n-(1<<x)+1;    //n-(1<<x)+1 => n-(2^x)+1
	   int rest=n-(1<<x);      //n-(1<<x) => n-(2^x) 
	   int part3=countBits(rest);
	   
	   int count=part1+part2+part3;
	   
	   return count;
    }
    
    public static int largestPowerOf2InRange(int num)
    {
      int power=0;
	  while((1<<power)<=num)    //(1<<power)<=num => (2^power)<=num
	     power++;
	     
	  return (power-1);
    }
}


//Note: x<<y = x*2^y
//Note: x>>y = x/(2^y)
