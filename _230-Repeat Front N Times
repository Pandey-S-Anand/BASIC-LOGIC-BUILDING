//Without Recursion

class Solution {
    public String frontTimes(String str, int n) {
        return (str.length() < 3 ? str : str.substring(0, 3)).repeat(n);
    }
}

//Aliter

class Solution {
    public String frontTimes(String str, int n) {
        String front = str.length() < 3 ? str : str.substring(0, 3);
        StringBuilder modifiedString = new StringBuilder();

        for (int i = 1; i <= n; i++) {
            modifiedString.append(front);
        }

        return modifiedString.toString();
    }
}


//With Recursion

class Solution {
    public String frontTimes(String str, int n) {
        String front = str.length() < 3 ? str : str.substring(0, 3);
        return frontTimesHelper(front, n, 0);
    }

    private String frontTimesHelper(String front, int n, int index) {
        if (index == n) {
            return ""; // Base case: no more repetitions needed
        }

        return front + frontTimesHelper(front, n, index + 1);
    }
}
