//Naive Approach

class Solution {
    public boolean isPalindrome(String str) {
        return isStringPalindrome(filterAlphaNumeric(str));
    }

    private String filterAlphaNumeric(String str) {
        StringBuilder modifiedString = new StringBuilder();

        for (int i = 0; i < str.length(); i++) {
            if (Character.isLetter(str.charAt(i)) || Character.isDigit(str.charAt(i))) {
                modifiedString.append(Character.toLowerCase(str.charAt(i)));
            }
        }

        return modifiedString.toString();
    }

    private boolean isStringPalindrome(String str) {
        int i = 0, j = str.length() - 1;

        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
}


//Optimal Approach

class Solution {
    public boolean isPalindrome(String str) {
        int start = 0;
        int end = str.length() - 1;

        while (start < end) {
            while (start < end && !Character.isLetterOrDigit(str.charAt(start))) {
                start++;
            }

            while (start < end && !Character.isLetterOrDigit(str.charAt(end))) {
                end--;
            }

            if (start < end) {
                if (Character.toLowerCase(str.charAt(start)) != Character.toLowerCase(str.charAt(end))) {
                    return false;
                }

                start++;
                end--;
            }
        }

        return true;
    }
}
